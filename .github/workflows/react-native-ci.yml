name: Storefront App CI

on:
    pull_request:
        branches: [main] # Trigger for PRs to main branch

env:
    FLEETBASE_KEY: ${{ secrets.FLEETBASE_KEY }}
    GOOGLE_MAPS_KEY: ${{ secrets.GOOGLE_MAPS_KEY }}
    ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}

jobs:
    install_and_test:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Install Node.js
              uses: actions/setup-node@v1
              with:
                  node-version: 18.x

            - name: Install dependencies
              run: npm install -g yarn

            - name: Enable Corepack
              run: corepack enable

            - name: Activate Yarn 3.6.4
              run: corepack prepare yarn@3.6.4 --activate

            - name: Install dependencies
              run: yarn install

    android_build:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Generate google-services.json
              env:
                  GOOGLE_SERVICES_JSON: ${{ secrets.STOREFRONT_GOOGLE_SERVICES_JSON }}
              run: |
                  echo "$GOOGLE_SERVICES_JSON" > google-services.json
                  mkdir -p android/app/src  
                  mv google-services.json android/app/src

            - name: Install Node.js
              uses: actions/setup-node@v1
              with:
                  node-version: 18.x

            - name: Install dependencies
              run: npm install -g yarn

            - name: Enable Corepack
              run: corepack enable

            - name: Activate Yarn 3.6.4
              run: corepack prepare yarn@3.6.4 --activate

            - name: Install dependencies
              run: yarn install

            - name: Set up JDK 17
              uses: actions/setup-java@v4
              with:
                  distribution: 'oracle'
                  java-version: '17'

            - name: Cache Gradle Wrapper
              uses: actions/cache@v2
              with:
                  path: ~/.gradle/wrapper
                  key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

            - name: Cache Gradle Dependencies
              uses: actions/cache@v2
              with:
                  path: ~/.gradle/caches
                  key: ${{ runner.os }}-gradle-caches-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
                  restore-keys: |
                      ${{ runner.os }}-gradle-caches-
            - name: Make Gradlew Executable
              run: cd android && chmod +x ./gradlew

            - name: Build Android
              run: cd android && ./gradlew assembleDebug
              env:
                  JVM_OPTS: '-Xmx4096m'

    ios_build:
        runs-on: macOS-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Setup XCode
              uses: maxim-lobanov/setup-xcode@v1
              with:
                  xcode-version: latest-stable

            - name: Install Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 18.x

            - name: Install dependencies
              run: npm install -g yarn

            - name: Enable Corepack
              run: corepack enable

            - name: Activate Yarn 3.6.4
              run: corepack prepare yarn@3.6.4 --activate

            - name: Install dependencies
              run: yarn install

            - name: Install CocoaPods
              run: sudo gem install cocoapods

            - name: Install iOS pods
              run: cd ios && pod install

            - name: Start Metro Bundler in the background
              run: yarn start --reset-cache &

            - name: List available simulators
              run: xcrun simctl list devices

            - name: Boot iOS Simulator
              run: |
                  SIMULATOR_NAME="iPhone 15 Pro"
                  SIMULATOR_ID=$(xcrun simctl list devices available | grep -i "$SIMULATOR_NAME (" | head -n 1 | sed -E 's/.*\(([A-F0-9-]+)\).*/\1/')

                  if [ -z "$SIMULATOR_ID" ]; then
                    echo "‚ùå No available simulator found for $SIMULATOR_NAME"
                    exit 1
                  fi

                  echo "‚úÖ Found simulator ID: $SIMULATOR_ID"
                  xcrun simctl boot "$SIMULATOR_ID"

                  # Debugging: Print simulator status
                  echo "üìù Checking simulator status..."
                  xcrun simctl list devices | grep "$SIMULATOR_ID"

                  # Prevent infinite hang: Limit wait time to 60 seconds
                  echo "‚è≥ Waiting for simulator to be ready (max 60s)..."
                  for i in {1..12}; do
                      STATUS=$(xcrun simctl list devices | grep "$SIMULATOR_ID")
                      if [[ "$STATUS" == *"(Booted)"* ]]; then
                          echo "‚úÖ Simulator is booted!"
                          break
                      fi
                      sleep 5
                  done

                  # Final check
                  FINAL_STATUS=$(xcrun simctl list devices | grep "$SIMULATOR_ID")
                  if [[ "$FINAL_STATUS" != *"(Booted)"* ]]; then
                      echo "‚ùå Simulator failed to boot within 60 seconds."
                      exit 1
                  fi

            - name: Run iOS app on simulator
              run: |
                  SIMULATOR_NAME="iPhone 15 Pro"
                  SIMULATOR_ID=$(xcrun simctl list devices available | grep -i "$SIMULATOR_NAME (" | head -n 1 | sed -E 's/.*\(([A-F0-9-]+)\).*/\1/')

                  if [ -z "$SIMULATOR_ID" ]; then
                    echo "‚ùå No available simulator ID found for $SIMULATOR_NAME"
                    exit 1
                  fi

                  echo "‚úÖ Using Simulator ID: $SIMULATOR_ID"

                  # Debugging: Confirm simulator state
                  echo "üìù Checking simulator status..."
                  xcrun simctl list devices | grep "$SIMULATOR_ID"

                  # Install the app on the simulator
                  echo "üì• Installing app on simulator..."
                  xcrun simctl install "$SIMULATOR_ID" ios/build/Build/Products/Debug-iphonesimulator/StorefrontApp.app

                  # Launch the app
                  echo "üöÄ Launching app on simulator..."
                  xcrun simctl launch "$SIMULATOR_ID" com.storefront.app
